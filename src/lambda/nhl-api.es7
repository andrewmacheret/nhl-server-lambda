const moment = require('moment-timezone');
const request = require('request-promise-native');
const nhlCssLink = require('./nhl-css-link');

const nhlApiUrl = 'https://statsapi.web.nhl.com/api/v1';

let cacheTeams = null;
const cacheSchedules = {};



async function callNhlApi(path) {
  const url = nhlApiUrl + path;
  console.log(`calling url: ${url}`);
  return await request({uri: url, json: true});
}

async function loadTeams() {
  if (cacheTeams) return cacheTeams;

  return cacheTeams = await callNhlApi('/teams');
}

async function loadSchedule(date, teamId, callback) {
  if (!cacheSchedules[date]) cacheSchedules[date] = {};
  if (cacheSchedules[date][teamId]) return cacheSchedules[date][teamId];

  const url = `/schedule?site=en_nhl&expand=schedule.broadcasts.all&startDate=${date}&endDate=${date}&teamId=${teamId}`;
  return cacheSchedules[date][teamId] = await callNhlApi(url);
}

async function myTeamToday(team, date) {

  if (!team) {
    return reject('team must be specified');
  }
  if (!team.match(/^[a-z\ ]+$/)) {
    return reject(`team must be a lower case set of words, such as "sharks" or "maple leafs", was: "${teamId}"`);
  }
  
  if (!date) {
    // TODO: determine time zone based on which team was chosen?
    date = moment.tz('America/Los_Angeles').format('YYYY-MM-DD');
  }
  if (!date.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
    return reject(`date must be in format YYYY-MM-DD: "${date}"`);
  }

  console.log('load teams ...');
  const nhlTeams = await loadTeams();

  const nhlTeamNameToId = Object.assign({}, ...nhlTeams.teams.map((nhlTeam) => ({
    [ nhlTeam.teamName.toLowerCase() ]: nhlTeam.id
  })));
  const nhlTeamIdToFullTeamName = Object.assign({}, ...nhlTeams.teams.map((nhlTeam) => ({
    [ nhlTeam.id ]: nhlTeam.name
  })));

  const teamId = nhlTeamNameToId[team];
  if (!teamId) {
    throw `team not found: "${team}"`;
  }

  console.log(`load schedule for date=${date} teamId=${teamId} ...`);
  const nhlSchedule = await loadSchedule(date, teamId);

  const games = ((nhlSchedule.dates[0] || {}).games || []).map((item) => {
    const {
      teams: {
        home: {
          team: {
            id: homeId,
            name: homeName
          }
        },
        away: {
          team: {
            id: awayId,
            name: awayName
          }
        }
      }
    } = item;
    const isHome = homeId === teamId;

      return {
        title: isHome ? `${homeName} vs ${awayName}` : `${awayName} at ${homeName}`,
        home: {id: homeId, name: homeName},
        away: {id: awayId, name: awayName},
        isHome: isHome,
        gameDate: item.gameDate,
        broadcasts: item.broadcasts ? item.broadcasts.map((broadcast) => broadcast.name) : []
      };
    });
  return {games};
}

exports.handler = async (event, context, callback) => {
  console.log('called with event:', event);

  const apis = {
    myTeamToday: () => myTeamToday(event.team, event.date),
    cssLink: () => nhlCssLink.loadCssUrl()
  };
  const apiNotFound = () => { throw `Unsupported or undefined action: ${event.action}` };

  try {
    const data = await (apis[event.action] || apiNotFound)();
    console.log('RESOLVE:', JSON.stringify(data));
    callback(null, data);
  } catch(err) {
    console.log('REJECT:', err);
    callback(JSON.stringify(err));
  }
};
